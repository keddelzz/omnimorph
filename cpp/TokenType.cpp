#include "TokenType.h"

#include <cassert>

namespace cpp {

std::ostream &operator<<(std::ostream &stream, TokenType type)
{
    switch (type) {
        case TokenType::Error: return stream << "Error";
        case TokenType::Sym_PlusPlus: return stream << "Sym_PlusPlus";
        case TokenType::Sym_MinusMinus: return stream << "Sym_MinusMinus";
        case TokenType::Sym_PlusEqual: return stream << "Sym_PlusEqual";
        case TokenType::Sym_Plus: return stream << "Sym_Plus";
        case TokenType::Sym_MinusEqual: return stream << "Sym_MinusEqual";
        case TokenType::Sym_Minus: return stream << "Sym_Minus";
        case TokenType::Sym_StarEqual: return stream << "Sym_StarEqual";
        case TokenType::Sym_Star: return stream << "Sym_Star";
        case TokenType::Sym_SlashEqual: return stream << "Sym_SlashEqual";
        case TokenType::Sym_Slash: return stream << "Sym_Slash";
        case TokenType::Sym_PercentEqual: return stream << "Sym_PercentEqual";
        case TokenType::Sym_Percent: return stream << "Sym_Percent";
        case TokenType::Sym_LtLtEqual: return stream << "Sym_LtLtEqual";
        case TokenType::Sym_LtLt: return stream << "Sym_LtLt";
        case TokenType::Sym_Le: return stream << "Sym_Le";
        case TokenType::Sym_Lt: return stream << "Sym_Lt";
        case TokenType::Sym_GtGtEqual: return stream << "Sym_GtGtEqual";
        case TokenType::Sym_GtGt: return stream << "Sym_GtGt";
        case TokenType::Sym_Ge: return stream << "Sym_Ge";
        case TokenType::Sym_Gt: return stream << "Sym_Gt";
        case TokenType::Sym_EqualEqual: return stream << "Sym_EqualEqual";
        case TokenType::Sym_Equal: return stream << "Sym_Equal";
        case TokenType::Sym_BangEqual: return stream << "Sym_BangEqual";
        case TokenType::Sym_Bang: return stream << "Sym_Bang";
        case TokenType::Sym_AmpAmp: return stream << "Sym_AmpAmp";
        case TokenType::Sym_AmpEqual: return stream << "Sym_AmpEqual";
        case TokenType::Sym_Amp: return stream << "Sym_Amp";
        case TokenType::Sym_BarBar: return stream << "Sym_BarBar";
        case TokenType::Sym_BarEqual: return stream << "Sym_BarEqual";
        case TokenType::Sym_Bar: return stream << "Sym_Bar";
        case TokenType::Sym_Tilde: return stream << "Sym_Tilde";
        case TokenType::Sym_CircumflexEqual: return stream << "Sym_CircumflexEqual";
        case TokenType::Sym_Circumflex: return stream << "Sym_Circumflex";
        case TokenType::Sym_QMark: return stream << "Sym_QMark";
        case TokenType::Sym_ColonColon: return stream << "Sym_ColonColon";
        case TokenType::Sym_Colon: return stream << "Sym_Colon";
        case TokenType::Sym_Semicolon: return stream << "Sym_Semicolon";
        case TokenType::Sym_Comma: return stream << "Sym_Comma";
        case TokenType::Sym_Hash: return stream << "Sym_Hash";
        case TokenType::Sym_DotDotDot: return stream << "Sym_DotDotDot";
        case TokenType::Sym_Dot: return stream << "Sym_Dot";
        case TokenType::Sym_OpenParen: return stream << "Sym_OpenParen";
        case TokenType::Sym_CloseParen: return stream << "Sym_CloseParen";
        case TokenType::Sym_OpenBracket: return stream << "Sym_OpenBracket";
        case TokenType::Sym_CloseBracket: return stream << "Sym_CloseBracket";
        case TokenType::Sym_OpenCurly: return stream << "Sym_OpenCurly";
        case TokenType::Sym_CloseCurly: return stream << "Sym_CloseCurly";
        case TokenType::Kw_and: return stream << "Kw_and";
        case TokenType::Kw_and_eq: return stream << "Kw_and_eq";
        case TokenType::Kw_asm: return stream << "Kw_asm";
        case TokenType::Kw_auto: return stream << "Kw_auto";
        case TokenType::Kw_bitor: return stream << "Kw_bitor";
        case TokenType::Kw_bitand: return stream << "Kw_bitand";
        case TokenType::Kw_bool: return stream << "Kw_bool";
        case TokenType::Kw_break: return stream << "Kw_break";
        case TokenType::Kw_case: return stream << "Kw_case";
        case TokenType::Kw_catch: return stream << "Kw_catch";
        case TokenType::Kw_char: return stream << "Kw_char";
        case TokenType::Kw_class: return stream << "Kw_class";
        case TokenType::Kw_compl: return stream << "Kw_compl";
        case TokenType::Kw_const: return stream << "Kw_const";
        case TokenType::Kw_const_cast: return stream << "Kw_const_cast";
        case TokenType::Kw_continue: return stream << "Kw_continue";
        case TokenType::Kw_default: return stream << "Kw_default";
        case TokenType::Kw_delete: return stream << "Kw_delete";
        case TokenType::Kw_do: return stream << "Kw_do";
        case TokenType::Kw_double: return stream << "Kw_double";
        case TokenType::Kw_dynamic_cast: return stream << "Kw_dynamic_cast";
        case TokenType::Kw_else: return stream << "Kw_else";
        case TokenType::Kw_enum: return stream << "Kw_enum";
        case TokenType::Kw_explicit: return stream << "Kw_explicit";
        case TokenType::Kw_export: return stream << "Kw_export";
        case TokenType::Kw_extern: return stream << "Kw_extern";
        case TokenType::Kw_false: return stream << "Kw_false";
        case TokenType::Kw_float: return stream << "Kw_float";
        case TokenType::Kw_for: return stream << "Kw_for";
        case TokenType::Kw_friend: return stream << "Kw_friend";
        case TokenType::Kw_goto: return stream << "Kw_goto";
        case TokenType::Kw_if: return stream << "Kw_if";
        case TokenType::Kw_inline: return stream << "Kw_inline";
        case TokenType::Kw_int: return stream << "Kw_int";
        case TokenType::Kw_long: return stream << "Kw_long";
        case TokenType::Kw_mutable: return stream << "Kw_mutable";
        case TokenType::Kw_namespace: return stream << "Kw_namespace";
        case TokenType::Kw_new: return stream << "Kw_new";
        case TokenType::Kw_not: return stream << "Kw_not";
        case TokenType::Kw_not_eq: return stream << "Kw_not_eq";
        case TokenType::Kw_symbol: return stream << "Kw_symbol";
        case TokenType::Kw_or: return stream << "Kw_or";
        case TokenType::Kw_or_eq: return stream << "Kw_or_eq";
        case TokenType::Kw_private: return stream << "Kw_private";
        case TokenType::Kw_protected: return stream << "Kw_protected";
        case TokenType::Kw_public: return stream << "Kw_public";
        case TokenType::Kw_register: return stream << "Kw_register";
        case TokenType::Kw_reinterpret_cast: return stream << "Kw_reinterpret_cast";
        case TokenType::Kw_return: return stream << "Kw_return";
        case TokenType::Kw_short: return stream << "Kw_short";
        case TokenType::Kw_signed: return stream << "Kw_signed";
        case TokenType::Kw_sizeof: return stream << "Kw_sizeof";
        case TokenType::Kw_static: return stream << "Kw_static";
        case TokenType::Kw_static_cast: return stream << "Kw_static_cast";
        case TokenType::Kw_struct: return stream << "Kw_struct";
        case TokenType::Kw_switch: return stream << "Kw_switch";
        case TokenType::Kw_template: return stream << "Kw_template";
        case TokenType::Kw_this: return stream << "Kw_this";
        case TokenType::Kw_throw: return stream << "Kw_throw";
        case TokenType::Kw_true: return stream << "Kw_true";
        case TokenType::Kw_try: return stream << "Kw_try";
        case TokenType::Kw_typedef: return stream << "Kw_typedef";
        case TokenType::Kw_typeid: return stream << "Kw_typeid";
        case TokenType::Kw_typename: return stream << "Kw_typename";
        case TokenType::Kw_union: return stream << "Kw_union";
        case TokenType::Kw_unsigned: return stream << "Kw_unsigned";
        case TokenType::Kw_using: return stream << "Kw_using";
        case TokenType::Kw_virtual: return stream << "Kw_virtual";
        case TokenType::Kw_void: return stream << "Kw_void";
        case TokenType::Kw_volatile: return stream << "Kw_volatile";
        case TokenType::Kw_wchar_t: return stream << "Kw_wchar_t";
        case TokenType::Kw_while: return stream << "Kw_while";
        case TokenType::Kw_xor: return stream << "Kw_xor";
        case TokenType::Kw_xor_eq: return stream << "Kw_xor_eq";
        case TokenType::HexIntLit: return stream << "HexIntLit";
        case TokenType::OctIntLit: return stream << "OctIntLit";
        case TokenType::DecIntLit: return stream << "DecIntLit";
        case TokenType::FloatLit: return stream << "FloatLit";
        case TokenType::CharLit: return stream << "CharLit";
        case TokenType::StringLit: return stream << "StringLit";
        case TokenType::Ident: return stream << "Ident";
        case TokenType::White: return stream << "White";
        case TokenType::Comment_SingleLine: return stream << "Comment_SingleLine";
        case TokenType::Comment_MultiLine: return stream << "Comment_MultiLine";
        case TokenType::Eof: return stream << "Eof";
        case TokenType::_TokenCount: return stream << "_TokenCount";
        default: assert(false);
    }
    return stream;
}

}
